/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package comparisons

import kotlinx.coroutines.runBlocking
import org.radarbase.lang.expression.*
import org.radarbase.lang.expression.Function
import kotlin.system.exitProcess

fun main() {
    val functions = listOf<Function>(
        SumFunction(),
        ListVariablesFunction(),
        CountFunction(),
    )
    val parser = ExpressionParser(functions)

    val expr = try {
        parser.parse("sum(alternative.brace.cool) == 10")
    } catch (ex: ExpressionParserException) {
        println("Failed to parse expression ${ex.expression} at position ${ex.errorOffset}: ${ex.message}")
        exitProcess(1)
    }

    println(expr)
    runBlocking {
        val resolver = DirectVariableResolver().apply {
            register(functions)
            register("user", "a", 1.toVariable())
            register("user", "b", 1.toVariable())
            register("user", "c", 1.toVariable())
            register("user", "r", 1.toVariable())
            register("user", "d", 1.toVariable())
            register("user.blootsvoets", "alternative.brace.mellow", 0.toVariable())
            register("user.blootsvoets", "alternative.brace.cool", 10.toVariable())
        }

        val interpreter = Interpreter(resolver)
        try {
            print(
                interpreter.interpret(
                    listOf(
                        SimpleScope("user.blootsvoets"),
                        SimpleScope("user"),
                    ),
                    expr,
                ),
            )
        } catch (ex: InterpreterException) {
            println("Failed to evaluate expression ${ex.expression}:\n\n${ex.message}")
        }
    }
}
