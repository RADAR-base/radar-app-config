<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!--
  This is a full example hazelcast.xml that includes all the
  configuration elements and attributes of a Hazelcast member.
  To use this, rename it to hazelcast.xml and place it in
  the directory where you start your Hazelcast member.
  To learn how to configure Hazelcast, please see the schema at
  https://hazelcast.com/schema/config/hazelcast-config-4.1.xsd
  or the Reference Manual at https://hazelcast.org/documentation/
-->

<!--suppress XmlDefaultAttributeValue -->
<hazelcast xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns="http://www.hazelcast.com/schema/config"
           xsi:schemaLocation="http://www.hazelcast.com/schema/config
           http://www.hazelcast.com/schema/config/hazelcast-config-4.1.xsd">
    <!--
        Specifies the cluster name. It allows creating separate sub-clusters with different names.
        The name is also referenced in the WAN Replication configuration.
    -->
    <cluster-name>appconfig</cluster-name>

    <!--
        ===== HAZELCAST NETWORK CONFIGURATION =====
        The configuration to build your Hazelcast's network includes configuration for port, interface, discovery
        mechanism, SSL, encryption, etc. The configuration element's name is <network>.
        It has the following sub-elements:
        * <public address>:
        This optional element overrides the public address of a member. It is useful when
        you have a private cloud. Normally, a member selects its socket address as its public address. But behind a NAT,
        two members may not be able to see/access each other. In this case, you can set their public addresses to their
        defined addresses on NAT. The value should be given in the format "host IP address:port number".
        * <port>:
        Specifies the ports that Hazelcast will use to communicate between cluster members. It is optional and
        its default value is 5701. It has the following attributes:
        - port-count:
            By default, Hazelcast will try 100 ports to bind (i.e. the ports between 5701 and 5801). You can
            change the port count in such cases as having large instances on a single machine or you are
            willing to have only a few ports assigned. port-count is optional and its default value is 100.
        - auto-increment:
            By default, Hazelcast tries to find a port by automatically incrementing the port numbers. If you
            don't want this (for example, you want to use a specific port), set auto-increment to false. If it is
            set to false, the port-count attribute is ignored. auto-increment is optional and its default value is true.
            Examples:
            The example below looks for ports between 5701 and 5721, incrementing the ports starting from 5701.
            <port port-count="20">5701</port>
            The example below forces Hazelcast to use only the port 5701.
            <port auto-increment="false">5701</port>
        * <outbound-ports>:
        By default, Hazelcast lets the system pick up an ephemeral port during socket bind operation. But security
        policies/firewalls may require you to restrict outbound ports to be used by Hazelcast-enabled applications.
        You can specify these ports using <ports> under the element <outbound-ports>. You can give a single
        port number, comma separated multiple ports or port ranges. See the example below.
        <outbound-ports>
            <ports>33000-35000</ports>
            <ports>37000,37001,37002,37003</ports>
            <ports>38000,38500-38600</ports>
        </outbound-ports>
        * <reuse-address>:
        If you set this to true, Hazelcast will use the same port when you restart a member right after you
        shut it down. It is optional and its default value is false.
        * <join>:
        This configuration lets you choose a discovery mechanism that Hazelcast will use to form a cluster.
        Hazelcast can find members by multicast, TCP/IP lists and by various discovery mechanisms provided by different cloud APIs.
        The following are the elements of <join>:
        - <multicast>:
            Set its "enabled" attribute to true for discovery by multicast. It has another attribute
            ("loopbackModeEnabled") which enables or disables the loopback mode in the multicast discovery
            mechanism.
            It has the following sub-elements to fine tune the multicast discovery.
            - <multicast-group>:
                Specifies the multicast group IP address when you want to create clusters within
                the same network. Its default value is 224.2.2.3.
            - <multicast-port>:
                Specifies the multicast socket port that the Hazelcast member listens to and
                sends discovery messages through. Its default value is 54327.
            - <multicast-time-to-live>:
                Time-to-live value for multicast packets sent out to control the scope of multicasts.
            - <multicast-timeout-seconds>:
                Only when the members are starting up, this timeout (in seconds) specifies the
                period during which a member waits for a multicast response from another node.
                For example, if you set it as 60 seconds, each node will wait for 60 seconds until a
                leader node is selected. Its default value is 2 seconds.
            - <trusted-interfaces>:
                Includes IP addresses of trusted members. When a node wants to join to the cluster,
                its join request will be rejected if it is not a trusted member.
                You can give an IP addresses range using the wildcard (*) on the last digit of
                IP address (e.g. 192.168.1.* or 192.168.1.100-110).
        - <tcp-ip>:
            It has the following attributes.
            - "enabled":
                Specifies whether the TCP/IP discovery is enabled or not. Default value is false.
            - "connection-timeout-seconds":
                The maximum amount of time Hazelcast is going to try to connect to a well known member
                before giving up. Setting it to a too low value could mean that a member is not able
                to connect to a cluster. Setting it to a too high value means that member startup could
                slow down because of longer timeouts (e.g. when a well known member is not up). Increasing
                this value is recommended if you have many IPs listed and the members cannot properly
                build up the cluster. Its default value is 5.
            It has the following sub-elements.
            - <required-member>:
                IP address of the required member. Cluster will only be formed if the member with this
                IP address is found.
            - <member>:
                IP address(es) of one or more well known members. Once members are connected to these
                well known ones, all member addresses will be communicated with each other. You can
                also give comma separated IP addresses using the <members> element or list the members
                with the <member> element under <member-list>.
            - <members>:
                Comma separated IP addresses of one or more well known members.
            - <member-list>:
                IP address(es) of one or more well known members listed with the <member> element.
            - <interface>:
                IP address(es) of one or more well known members.
        - <aws>:
            Set its "enabled" attribute to true for discovery within Amazon EC2.
            Please refer to https://github.com/hazelcast/hazelcast-aws/#configuration for the configuration details.
        - <gcp>:
            Set its "enabled" attribute to true for discovery within the Google Cloud Platform.
            Please refer to https://github.com/hazelcast/hazelcast-gcp/#configuration for the configuration details.
        - <azure>:
            Set its "enabled" attribute to true for discovery within Microsoft Azure.
            Please refer to https://github.com/hazelcast/hazelcast-azure/#configuring-at-hazelcast-side for
            the configuration details.
        - <kubernetes>:
            Set its "enabled" attribute to true for discovery in the Kubernetes environment.
            Please refer to https://github.com/hazelcast/hazelcast-kubernetes#hazelcast-configuration for
            the configuration details.
        - <eureka>:
            Set its "enabled" attribute to true for discovery with using Eureka Service Registry.
            Please refer to https://github.com/hazelcast/hazelcast-eureka#hazelcast-configuration for
            the configuration details.
        - <discovery-strategies>:
            Set its "enabled" attribute to true for discovery in various cloud infrastructures. You also need to set the
            value of "hazelcast.discovery.enabled" property to true. See the description of the <properties> element
            to learn how to do this.
            You can define multiple discovery strategies using the <discovery-strategy> sub-element and its
            properties. Please refer to
            http://docs.hazelcast.org/docs/latest/manual/html-single/index.html#discovering-cluster-members
            to see the properties you can use.
            The following is an example for EC2 cloud.
            <discovery-strategies>
                <discovery-strategy class="com.hazelcast.jclouds.JCloudsDiscoveryStrategy" enabled="true">
                <properties>
                    <property name="provider">aws-ec2</property>
                    <property name="identity">AWS_IDENTITY</property>
                    <property name="credential">AWS_CREDENTIAL</property>
                </properties>
                </discovery-strategy>
            </discovery-strategies>
        * <interfaces>:
        Specifies which network interfaces Hazelcast should use. You need to set its "enabled" attribute
        to true to be able to use your defined interfaces. You can define multiple interfaces
        using its <interface> sub-element. By default, it is disabled.
        * <ssl>:
        Lets you configure SSL using the SSL context factory. This feature is available only in Hazelcast
        Enterprise. To be able to use it, encryption should NOT be enabled and you should first implement
        your SSLContextFactory class. Its configuration contains the factory class and SSL properties.
        By default, it is disabled. The following is an example:
        <ssl enabled="true">
            <factory-class-name>
                com.hazelcast.nio.ssl.BasicSSLContextFactory
            </factory-class-name>
            <properties>
                <property name="keyStore">keyStore</property>
                <property name="keyStorePassword">keyStorePassword</property>
                <property name="keyManagerAlgorithm">SunX509</property>
                <property name="trustManagerAlgorithm">SunX509</property>
                <property name="protocol">TLS</property>
                <property name="mutualAuthentication">REQUIRED</property>
            </properties>
        </ssl>
        * <socket-interceptor>:
        Lets you add custom hooks to join and perform connection procedures (like a custom authentication negotiation
        protocol, etc.). This feature is available only in Hazelcast Enterprise. To be able to use it, you
        should first implement the MemberSocketInterceptor (for members joining to a cluster) or
        SocketInterceptor (for clients connecting to a member) class. Its configuration contains the class you
        implemented and socket interceptor properties. By default, it is disabled. The following is an example:
        <socket-interceptor enabled="true">
            <class-name>
                com.hazelcast.examples.MySocketInterceptor
            </class-name>
            <properties>
                <property name="property1">value1</property>
                <property name="property2">value2</property>
            </properties>
        </socket-interceptor>
        * <symmetric-encryption>:
        Lets you encrypt the entire socket level communication among all Hazelcast members.
        This feature is available only in Hazelcast Enterprise.  Its configuration contains the encryption
        properties and the same configuration must be placed to all members. By default, it is disabled.
        The following is an example:
        <symmetric-encryption enabled="true">
            <algorithm>PBEWithMD5AndDES</algorithm>
            <salt>thesalt</salt>
            <password>thepass</password>
            <iteration-count>19</iteration-count>
        </symmetric-encryption>
        * <member-address-provider>:
        IMPORTANT
        This configuration is not intended to provide addresses of other cluster members with
        which the Hazelcast instance will form a cluster. This is an SPI for advanced use in
        cases where the DefaultAddressPicker does not pick suitable addresses to bind to
        and publish to other cluster members. For instance, this could allow easier
        deployment in some cases when running on Docker, AWS or other cloud environments.
        That said, if you are just starting with Hazelcast, you will probably want to
        set the member addresses by using the tcp-ip or multicast configuration
        or adding a discovery strategy.
        Member address provider allows to plug in own strategy to customize:
           1. What address Hazelcast will bind to
           2. What address Hazelcast will advertise to other members on which they can bind to
        In most environments you don't need to customize this and the default strategy will work just
        fine. However in some cloud environments the default strategy does not make the right choice and the
        member address provider delegates the process of address picking to external code. It has one optional attribute:
        * enabled:
        Specifies whether the member address provider SPI is enabled or not. Its default value is false.
        It has the following sub-elements:
            - <class-name>:
                The name of the class implementing the com.hazelcast.spi.MemberAddressProvider interface.
            - <properties>:
                The properties that will be provided when constructing the provided MemberAddressProvider. Hazelcast will
                first try instantiating the provided class by invoking a constructor accepting a single
                java.util.Properties instance. In the case where there is no such constructor and there are also
                no properties defined by this configuration, Hazelcast will exceptionally try to use the no-arg
                constructor.
        * <failure-detector>:
        A failure detector is responsible to determine if a member in the cluster is unreachable or crashed.
        Please refer to https://docs.hazelcast.org/docs/latest/manual/html-single/index.html#failure-detector-configuration
        for the failure detectors implemented by Hazelcast.
        This element has the following sub-element:
        * <icmp>:
        ICMP can be used in addition to the other detectors. It operates at layer 3 and detects network
        and hardware issues more quickly.
        It has the following sub-elements:
        * <timeout-milliseconds>:
            Timeout in Milliseconds before declaring a failed ping.
        * <fail-fast-on-startup>:
            Cluster Member will fail to start if it is unable to action an ICMP ping command when ICMP is enabled.
            Failure is usually due to OS level restrictions.
        * <interval-milliseconds>:
            Time in milliseconds between each ICMP ping.
        * <max-attempts>:
            Maximum number of consecutive failed attempts before declaring a member suspect.
        * <parallel-mode>:
            Run ICMP detection in parallel with the Heartbeat failure detector.
        * <ttl>:
            Maximum number of times the IP Datagram (ping) can be forwarded, in most cases
            all Hazelcast cluster members would be within one network switch/router therefore
            default of 0 is usually sufficient.
    -->
    <network>
        <port auto-increment="true" port-count="100">5801</port>
        <reuse-address>false</reuse-address>
        <join>
            <multicast enabled="true">
                <!--                <multicast-group>224.2.2.3</multicast-group>-->
                <multicast-port>55327</multicast-port>
            </multicast>
            <kubernetes enabled="false">
                <namespace>MY-KUBERNETES-NAMESPACE</namespace>
                <service-name>MY-SERVICE-NAME</service-name>
                <service-label-name>MY-SERVICE-LABEL-NAME</service-label-name>
                <service-label-value>MY-SERVICE-LABEL-VALUE</service-label-value>
            </kubernetes>
        </join>
    </network>

    <!--
        ===== HAZELCAST METRICS CONFIGURATION =====
        Configuration element's name is <metrics>.
        It has the following attributes:
        - enabled:
            The master-switch for the metrics collection. If this is set
            to false no metrics collection is done, regardless of the other
            settings. Its default value is true.
        It has the following sub-elements:
        * <management-center>:
            Defines the Hazelcast Management Center related metrics configuration.
            It has the following attributes:
            * "enabled":
                Controls whether the metrics collected are exposed to
                Hazelcast Management Center. It is enabled by default.
                Please note that the metrics are polled by the
                Hazelcast Management Center, hence the members need to
                buffer the collected metrics between two polls. The aim
                for this switch is to reduce memory consumption of the
                metrics system if the Hazelcast Management Center is not
                used.
            It has the following  sub-elements:
            * <retention-seconds>:
                Sets the number of seconds the metrics will be retained on the
                instance. By default, metrics are retained for 5 seconds (that is for
                one collection of metrics values, if default <collection-frequency-seconds>
                collection frequency is used). More retention means more heap memory, but
                allows for longer client hiccups without losing a value (for example to
                restart the Management Center).
        * <jmx>:
            Defines the JMX related metrics configuration.
            It has the following attributes:
            * "enabled":
                Controls whether the metrics collected are exposed to
                through JMX. It is enabled by default.
                In order to expose the metrics, the metrics system need
                to be enabled via the enabled master-switch attribute.
        * <collection-frequency-seconds>:
            Sets the metrics collection frequency in seconds.
            By default, metrics are collected every 5 seconds.
    -->
    <metrics enabled="false">
        <management-center enabled="false">
            <retention-seconds>30</retention-seconds>
        </management-center>
        <jmx enabled="false"/>
        <collection-frequency-seconds>10</collection-frequency-seconds>
    </metrics>
</hazelcast>
