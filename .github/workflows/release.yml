# Create release files
name: Release

on:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  REPOSITORY: ${{ github.repository }}
  IMAGES: >-
    [{
    'name': 'radar-app-config',
    'build_file': 'radar-app-config/Dockerfile',
    'authors': 'Pim van Nierop <pim@thehyve.nl>',
    'description': 'RADAR-base app config service'
    },{
    'name': 'radar-app-config-frontend',
    'build_file': 'radar-app-config-frontend/Dockerfile',
    'authors': 'Peyman Mohtashami <peyman@thehyve.nl>',
    'description': 'RADAR-base app config frontend'
    }]

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: 17

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Use Node.js 16
        uses: actions/setup-node@v4
        with:
          node-version: 16
          cache: npm
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        working-directory: ./radar-app-config-frontend
        run: npm install

      - name: Build code
        working-directory: ./radar-app-config-frontend
        run: npm run build

      - name: Compress node code
        working-directory: ./radar-app-config-frontend/dist
        run: zip -r radar-app-config-frontend.zip *

      - name: Upload to GitHub
        uses: AButler/upload-release-assets@v2.0
        with:
          files: '*/build/libs/*;radar-app-config/build/distributions/*;radar-app-config-frontend/dist/radar-app-config-frontend.zip'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install gpg secret key
        run: |
          cat <(echo -e "${{ secrets.OSSRH_GPG_SECRET_KEY }}") | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG

      - name: Publish
        env:
          OSSRH_USER: ${{ secrets.OSSRH_USER_TOKEN_ID }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_USER_TOKEN_SECRET }}
        run: ./gradlew -Psigning.gnupg.keyName=${{ secrets.OSSRH_GPG_SECRET_KEY_NAME }} -Psigning.gnupg.executable=gpg -Psigning.gnupg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }} publish closeAndReleaseSonatypeStagingRepository

  prepare-matrix:
    name: Prepare Matrix Output
    runs-on: ubuntu-latest
    permissions: {}
    outputs:
      images: ${{ steps.step1.outputs.matrix }}
    steps:
      - name: Create Matrix Variable
        id: step1
        run: echo "matrix=${{ env.IMAGES }}" >> $GITHUB_OUTPUT

  docker:
    needs: prepare-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ${{ fromJson(needs.prepare-matrix.outputs.images ) }}
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v5

      # Setup docker build environment
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Lowercase image name
        run: |
          echo "DOCKER_IMAGE=${REGISTRY}/${REPOSITORY,,}/${{ matrix.image.name }}" >>${GITHUB_ENV}

      # Add Docker labels and tags
      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=match,pattern=v(.*),group=1

      - name: Build backend docker and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.image.build_file }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: |
            ${{ steps.docker_meta.outputs.labels }}
            maintainer=${{ matrix.image.authors }}
            org.opencontainers.image.description=${{ matrix.image.description }}
            org.opencontainers.image.authors=${{ matrix.image.authors }}
            org.opencontainers.image.vendor=RADAR-base
            org.opencontainers.image.licenses=Apache-2.0

      - name: Inspect docker image
        run: |
          docker pull ${{ env.DOCKER_IMAGE }}:${{ steps.docker_meta.outputs.version }}
          docker image inspect ${{ env.DOCKER_IMAGE }}:${{ steps.docker_meta.outputs.version }}
