# Create release files
name: Release

on:
  release:
    types: [published]

jobs:
  publish:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Compile code
      - name: Compile code
        run: ./gradlew assemble collectLicense

      - name: Use Node.js 16
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: npm
          cache-dependency-path: '**/package-lock.json'

      # Compile the code
      - name: Install dependencies
        working-directory: ./radar-app-config-frontend
        run: npm install

      # Compile the code
      - name: Build code
        working-directory: ./radar-app-config-frontend
        run: npm run build

      - name: Compress node code
        working-directory: ./radar-app-config-frontend/dist
        run: zip -r radar-app-config-frontend.zip *

      # Upload it to GitHub
      - name: Upload to GitHub
        uses: AButler/upload-release-assets@v2.0
        with:
          files: '*/build/libs/*;radar-app-config/build/distributions/*;radar-app-config-frontend/dist/radar-app-config-frontend.zip;*/build/reports/*.tar.gz'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install gpg secret key
        run: |
          cat <(echo -e "${{ secrets.OSSRH_GPG_SECRET_KEY }}") | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG

      - name: Publish
        env:
          OSSRH_USER: ${{ secrets.OSSRH_USER }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
        run: ./gradlew -Psigning.gnupg.keyName=${{ secrets.OSSRH_GPG_SECRET_KEY_NAME }} -Psigning.gnupg.executable=gpg -Psigning.gnupg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }} publish closeAndReleaseSonatypeStagingRepository

  # Build and push tagged release backend docker image
  dockerBackend:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    env:
      DOCKER_IMAGE: radarbase/radar-app-config

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Add Docker labels and tags
      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      # Setup docker build environment
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build backend docker
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./radar-app-config/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          # Use runtime labels from docker_meta_backend as well as fixed labels
          labels: |
            ${{ steps.docker_meta.outputs.labels }}
            maintainer=Joris Borgdorff <joris@thehyve.nl>, Nivethika Mahasivam <nivethika@thehyve.nl>
            org.opencontainers.image.description=RADAR-base app config service
            org.opencontainers.image.authors=Joris Borgdorff <joris@thehyve.nl>, Nivethika Mahasivam <nivethika@thehyve.nl>
            org.opencontainers.image.vendor=RADAR-base
            org.opencontainers.image.licenses=Apache-2.0

      - name: Inspect docker image
        run: |
          docker pull ${{ env.DOCKER_IMAGE }}:${{ steps.docker_meta.outputs.version }}
          docker image inspect ${{ env.DOCKER_IMAGE }}:${{ steps.docker_meta.outputs.version }}

  dockerFrontend:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    env:
      DOCKER_IMAGE: radarbase/radar-app-config-frontend

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Add Docker labels and tags
      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      # Setup docker build environment
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build frontend docker
        uses: docker/build-push-action@v3
        with:
          context: ./radar-app-config-frontend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          # Use runtime labels from docker_meta_backend as well as fixed labels
          labels: |
            ${{ steps.docker_meta.outputs.labels }}
            maintainer=Peyman Mohtashami <peyman@thehyve.nl>, Joris Borgdorff <joris@thehyve.nl>
            org.opencontainers.image.description=RADAR-base app config frontend
            org.opencontainers.image.authors=Peyman Mohtashami <peyman@thehyve.nl>, Joris Borgdorff <joris@thehyve.nl>
            org.opencontainers.image.vendor=RADAR-base
            org.opencontainers.image.licenses=Apache-2.0

      - name: Inspect docker image
        run: |
          docker pull ${{ env.DOCKER_IMAGE }}:${{ steps.docker_meta.outputs.version }}
          docker image inspect ${{ env.DOCKER_IMAGE }}:${{ steps.docker_meta.outputs.version }}
